// Time Complexity - Iterating over the entire array takes O(N) time.
// Space Complexity - Since we do not use any extra space, space complexity is O(1).
// Explanation -
Traverse the given array from start to end - for each element a, increment the arr[a % n]th element by n.
Now on second traversal - for each element a, (a / n) gives us the frequency of appearance of that element in the array.
Since we know that elements in an array of size m range from 0 to n - 1, any element in the array (originally i before being incremented) can be greater than n ONLY IF the value i had appeared more than once in the original array.

class Solution{
  public:
    vector<int> duplicates(int arr[], int n){
        vector<int> duplicateArray;
        int a, freq;
        
        for(int i = 0; i < n; i++){
            a = arr[i];
            arr[a % n] += n;
        }
        
        for(int i = 0; i < n; i++){
            a = arr[i];
            freq = a / n;
            if(freq > 1){
                duplicateArray.push_back(i);
            }
        }
        
        if(duplicateArray.empty()) return {-1};
        return duplicateArray;
    }
};
