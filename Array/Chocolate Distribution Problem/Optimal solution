// Time Complexity - Since we are sorting the array, time taken is O(NlogN).
// Space Complexity - Since we do not use any extra space, space taken is O(1).
// Explanation - We sort the array to get it in an increasing order.
Now we iterate through the array to minimize the diferrence between the maximum and minimum chocolate.

a = 3, 4, 1, 9, 56, 7, 9, 12
After sorting, 
a = 1, 3, 4, 7, 9, 9, 12, 56
iteration 1 => minDifference = min(9 - 1, INT_MAX) = 8
iteration 2 => minDifference = min(9 - 3, 8) = 6
iteration 3 => minDifference = min(12 - 4, 6) = 6
iteration 4 => minDifference = min(56 - 7, 6) = 6
Thus our for loop runs from 0 to n - m + 1.

class Solution{
    public:
    long long findMinDiff(vector<long long> a, long long n, long long m){
        sort(a.begin(), a.end());
        int minDifference = INT_MAX;
        for(int i = 0; i < n - m + 1; i++){
            int currDifference = a[i + m - 1] - a[i];
            minDifference = min(currDifference, minDifference);
        }
        return minDifference;
    }   
};
