// Time Complexity - We do not visit all the nodes, but travel only through the height of the tree. Thus time taken is O(H) => where H = logN base 2 in case of a binary tree
// Space Complexity - Since the nodes are being stored in the call stack, space taken is O(H).
// Explanation - We compare the value of the current node with the target value, and accordingly travel left or right.

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        while(root && root->val != val){
            root = (root->val > val) ? root->left : root->right;
        }
        return root;
    }
};
